import React, { useState, useEffect } from 'react';
import { useAdminData } from '../../context/AdminDataContext';
import { FaSave, FaTimes, FaEdit, FaPlus, FaTrash, FaUpload } from 'react-icons/fa';
import IconSelector from '../../components/IconSelector';
import './ContentManagement.css';

export default function ContentManagement() {
  const { aboutContent, updateAboutContent } = useAdminData();
  const [activeTab, setActiveTab] = useState('basic');
  const [formData, setFormData] = useState({
    homeHero: aboutContent.homeHero || {
      title: '–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤',
      description: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã.',
      ctaText: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥',
      ctaLink: '/catalog',
      imageCaption: '–ù–∞–¥—ë–∂–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–µ–∑–¥–µ—Ö–æ–¥–∞',
      heroEffect: 'particles',
      visualButtons: [{ text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', link: '/catalog' }],
      visualImage: ''
    },
    title: aboutContent.title || '',
    description: aboutContent.description || '',
    advantages: aboutContent.advantages || [],
    whyChooseUs: aboutContent.whyChooseUs || [],
    team: aboutContent.team || [],
    history: aboutContent.history || { title: '', content: '', milestones: [] },
    contacts: aboutContent.contacts || {},
    deliveryAndPayment: aboutContent.deliveryAndPayment || {
      steps: [],
      deliveryMethods: [],
      deliveryNote: '',
      payment: { whyPrepay: '', whyPrepayExtra: '', trust: '', trustExtra: '', requisites: '' }
    },
    footer: aboutContent.footer || {
      aboutSection: { title: '', description: '' },
      contactsSection: { title: '', phone: '', email: '', address: '' },
      informationSection: { title: '', links: [] },
      copyright: ''
    }
  });

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º formData —Å aboutContent –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    setFormData({
      homeHero: aboutContent.homeHero || {
        title: '–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤',
        description: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã.',
        ctaText: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥',
        ctaLink: '/catalog',
        imageCaption: '–ù–∞–¥—ë–∂–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–µ–∑–¥–µ—Ö–æ–¥–∞',
        heroEffect: 'particles',
        visualButtons: [{ text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', link: '/catalog' }],
        visualImage: ''
      },
      title: aboutContent.title || '',
      description: aboutContent.description || '',
      advantages: aboutContent.advantages || [],
      whyChooseUs: aboutContent.whyChooseUs || [],
      team: aboutContent.team || [],
      history: aboutContent.history || { title: '', content: '', milestones: [] },
      contacts: aboutContent.contacts || {},
      deliveryAndPayment: aboutContent.deliveryAndPayment || {
        steps: [],
        deliveryMethods: [],
        deliveryNote: '',
        payment: { whyPrepay: '', whyPrepayExtra: '', trust: '', trustExtra: '', requisites: '' }
      },
      footer: aboutContent.footer || {
        aboutSection: { title: '', description: '' },
        contactsSection: { title: '', phone: '', email: '', address: '' },
        informationSection: { title: '', links: [] },
        copyright: ''
      }
    });
  }, [aboutContent]);

  const handleBasicChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleHomeHeroChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      homeHero: {
        ...prev.homeHero,
        [name]: value
      }
    }));
  };



  const handleContactChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      contacts: {
        ...prev.contacts,
        [name]: value
      }
    }));
  };

  const handleFooterChange = (section, field, value) => {
    setFormData(prev => ({
      ...prev,
      footer: {
        ...prev.footer,
        [section]: {
          ...prev.footer[section],
          [field]: value
        }
      }
    }));
  };



  const handleFooterLinkChange = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      footer: {
        ...prev.footer,
        informationSection: {
          ...prev.footer.informationSection,
          links: prev.footer.informationSection.links.map((link, i) => 
            i === index ? { ...link, [field]: value } : link
          )
        }
      }
    }));
  };

  const addFooterLink = () => {
    setFormData(prev => ({
      ...prev,
      footer: {
        ...prev.footer,
        informationSection: {
          ...prev.footer.informationSection,
          links: [...prev.footer.informationSection.links, { text: '', url: '' }]
        }
      }
    }));
  };

  const removeFooterLink = (index) => {
    setFormData(prev => ({
      ...prev,
      footer: {
        ...prev.footer,
        informationSection: {
          ...prev.footer.informationSection,
          links: prev.footer.informationSection.links.filter((_, i) => i !== index)
        }
      }
    }));
  };

  const handleHistoryChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      history: {
        ...prev.history,
        [name]: value
      }
    }));
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏
  const addAdvantage = () => {
    setFormData(prev => ({
      ...prev,
      advantages: [...prev.advantages, { title: '', description: '', icon: 'üéØ' }]
    }));
  };

  const updateAdvantage = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      advantages: prev.advantages.map((item, i) => 
        i === index ? { ...item, [field]: value } : item
      )
    }));
  };

  const removeAdvantage = (index) => {
    setFormData(prev => ({
      ...prev,
      advantages: prev.advantages.filter((_, i) => i !== index)
    }));
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å"
  const addWhyChooseUs = () => {
    setFormData(prev => ({
      ...prev,
      whyChooseUs: [...prev.whyChooseUs, { title: '', description: '', icon: '‚≠ê' }]
    }));
  };

  const updateWhyChooseUs = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      whyChooseUs: prev.whyChooseUs.map((item, i) => 
        i === index ? { ...item, [field]: value } : item
      )
    }));
  };

  const removeWhyChooseUs = (index) => {
    setFormData(prev => ({
      ...prev,
      whyChooseUs: prev.whyChooseUs.filter((_, i) => i !== index)
    }));
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
  const addTeamMember = () => {
    setFormData(prev => ({
      ...prev,
      team: [...prev.team, { 
        name: '', 
        position: '', 
        experience: '', 
        photo: '', 
        description: '' 
      }]
    }));
  };

  const updateTeamMember = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      team: prev.team.map((item, i) => 
        i === index ? { ...item, [field]: value } : item
      )
    }));
  };

  const removeTeamMember = (index) => {
    setFormData(prev => ({
      ...prev,
      team: prev.team.filter((_, i) => i !== index)
    }));
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞–º–∏ –∏—Å—Ç–æ—Ä–∏–∏
  const addMilestone = () => {
    setFormData(prev => ({
      ...prev,
      history: {
        ...prev.history,
        milestones: [...prev.history.milestones, {
          year: new Date().getFullYear().toString(),
          title: '',
          description: ''
        }]
      }
    }));
  };

  const updateMilestone = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      history: {
        ...prev.history,
        milestones: prev.history.milestones.map((item, i) => 
          i === index ? { ...item, [field]: value } : item
        )
      }
    }));
  };

  const removeMilestone = (index) => {
    setFormData(prev => ({
      ...prev,
      history: {
        ...prev.history,
        milestones: prev.history.milestones.filter((_, i) => i !== index)
      }
    }));
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
  const handlePhotoUpload = (index, file) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      updateTeamMember(index, 'photo', e.target.result);
    };
    reader.readAsDataURL(file);
  };

  const saveContent = () => {
    console.log('ContentManagement: Saving content data:', formData);
    console.log('ContentManagement: Current aboutContent before save:', aboutContent);
    console.log('ContentManagement: Team data being saved:', formData.team);
    console.log('ContentManagement: History data being saved:', formData.history);
    console.log('ContentManagement: Footer data being saved:', formData.footer);
    
    try {
      updateAboutContent(formData);
      console.log('ContentManagement: Content saved successfully');
      alert('–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } catch (error) {
      console.error('ContentManagement: Error saving content:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!');
    }
  };



  const tabs = [
    { id: 'home', label: '–ì–ª–∞–≤–Ω–∞—è (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫)' },
    { id: 'basic', label: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
    { id: 'advantages', label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞' },
    { id: 'whyChooseUs', label: '–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å' },
    { id: 'team', label: '–ö–æ–º–∞–Ω–¥–∞' },
    { id: 'history', label: '–ò—Å—Ç–æ—Ä–∏—è' },
    { id: 'contacts', label: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' },
    { id: 'delivery', label: '–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞' },
    { id: 'footer', label: '–ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å' }
  ];

  return (
    <div className="content-management">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–±—Ä–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ª–µ–π–∞—É—Ç–µ */}
      
      <div className="tabs">
        {tabs.map(tab => (
          <button
            key={tab.id}
            className={`tab ${activeTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.id)}
          >
            {tab.label}
          </button>
        ))}
      </div>

      <div className="tab-content">
        {activeTab === 'home' && (
          <div className="basic-info">
            <h3>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h3>
            <div className="form-group">
              <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
              <input
                type="text"
                name="title"
                value={formData.homeHero.title}
                onChange={handleHomeHeroChange}
                placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ Hero"
              />
            </div>
            <div className="form-group">
              <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
              <textarea
                name="description"
                value={formData.homeHero.description}
                onChange={handleHomeHeroChange}
                placeholder="–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫/–æ–ø–∏—Å–∞–Ω–∏–µ"
                rows={4}
              />
            </div>
            <div className="form-row">
              <div className="form-group">
                <label>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</label>
                <input
                  type="text"
                  name="ctaText"
                  value={formData.homeHero.ctaText}
                  onChange={handleHomeHeroChange}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥"
                />
              </div>
              <div className="form-group">
                <label>–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏:</label>
                <input
                  type="text"
                  name="ctaLink"
                  value={formData.homeHero.ctaLink}
                  onChange={handleHomeHeroChange}
                  placeholder="/catalog"
                />
              </div>
            </div>





          </div>
        )}
        {activeTab === 'basic' && (
          <div className="basic-info">
          <h3>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className="form-group">
              <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
              <input
                type="text"
                name="title"
                value={formData.title}
                onChange={handleBasicChange}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
              />
            </div>
            <div className="form-group">
              <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleBasicChange}
                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                rows={4}
              />
            </div>
          </div>
        )}

        {activeTab === 'advantages' && (
          <div className="advantages-section">
            <div className="section-header">
              <h3>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h3>
              <button onClick={addAdvantage} className="add-btn">
                <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
              </button>
            </div>
            
            {formData.advantages.map((advantage, index) => (
              <div key={index} className="advantage-item">
                <div className="advantage-header">
                  <span>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ #{index + 1}</span>
                  <button onClick={() => removeAdvantage(index)} className="remove-btn">
                    <FaTrash />
                  </button>
                </div>
                
                <div className="form-row">
                  <div className="form-group">
                    <label>–ò–∫–æ–Ω–∫–∞:</label>
                    <IconSelector
                      value={advantage.icon}
                      onChange={(icon) => updateAdvantage(index, 'icon', icon)}
                    />
                  </div>
                  <div className="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input
                      type="text"
                      value={advantage.title}
                      onChange={(e) => updateAdvantage(index, 'title', e.target.value)}
                      placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"
                    />
                  </div>
                </div>
                
                <div className="form-group">
                  <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                  <textarea
                    value={advantage.description}
                    onChange={(e) => updateAdvantage(index, 'description', e.target.value)}
                    placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"
                    rows={3}
                  />
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'whyChooseUs' && (
          <div className="why-choose-us-section">
            <div className="section-header">
              <h3>–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å</h3>
              <button onClick={addWhyChooseUs} className="add-btn">
                <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É
              </button>
            </div>
            
            {formData.whyChooseUs.map((item, index) => (
              <div key={index} className="why-choose-us-item">
                <div className="item-header">
                  <span>–ü—Ä–∏—á–∏–Ω–∞ #{index + 1}</span>
                  <button onClick={() => removeWhyChooseUs(index)} className="remove-btn">
                    <FaTrash />
                  </button>
                </div>
                
                <div className="form-row">
                  <div className="form-group">
                    <label>–ò–∫–æ–Ω–∫–∞:</label>
                    <IconSelector
                      value={item.icon}
                      onChange={(icon) => updateWhyChooseUs(index, 'icon', icon)}
                    />
                  </div>
                  <div className="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input
                      type="text"
                      value={item.title}
                      onChange={(e) => updateWhyChooseUs(index, 'title', e.target.value)}
                      placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏—á–∏–Ω—ã"
                    />
                  </div>
                </div>
                
                <div className="form-group">
                  <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                  <textarea
                    value={item.description}
                    onChange={(e) => updateWhyChooseUs(index, 'description', e.target.value)}
                    placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    rows={3}
                  />
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'team' && (
          <div className="team-section">
            <div className="section-header">
              <h3>–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞</h3>
              <button onClick={addTeamMember} className="add-btn">
                <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
              </button>
            </div>
            
            {formData.team.map((member, index) => (
              <div key={index} className="team-member-item">
                <div className="member-header">
                  <span>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ #{index + 1}</span>
                  <button onClick={() => removeTeamMember(index)} className="remove-btn">
                    <FaTrash />
                  </button>
                </div>
                
                <div className="form-row">
                  <div className="form-group">
                    <label>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:</label>
                    <div className="photo-upload">
                      {member.photo && (
                        <img src={member.photo} alt="–§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" className="member-photo-preview" />
                      )}
                      <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => {
                          if (e.target.files[0]) {
                            handlePhotoUpload(index, e.target.files[0]);
                          }
                        }}
                        className="file-input"
                      />
                      <button type="button" className="upload-btn" onClick={() => {
                        const input = document.querySelector(`input[type="file"]`);
                        if (input) input.click();
                      }}>
                        <FaUpload /> {member.photo ? '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ'}
                      </button>
                    </div>
                  </div>
                </div>
                
                <div className="form-row">
                  <div className="form-group">
                    <label>–ò–º—è:</label>
                    <input
                      type="text"
                      value={member.name}
                      onChange={(e) => updateTeamMember(index, 'name', e.target.value)}
                      placeholder="–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
                    />
                  </div>
                  <div className="form-group">
                    <label>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</label>
                    <input
                      type="text"
                      value={member.position}
                      onChange={(e) => updateTeamMember(index, 'position', e.target.value)}
                      placeholder="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
                    />
                  </div>
                </div>
                
                <div className="form-row">
                  <div className="form-group">
                    <label>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</label>
                    <input
                      type="text"
                      value={member.experience}
                      onChange={(e) => updateTeamMember(index, 'experience', e.target.value)}
                      placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –ª–µ—Ç –≤ –æ—Ç—Ä–∞—Å–ª–∏"
                    />
                  </div>
                </div>
                
                <div className="form-group">
                  <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                  <textarea
                    value={member.description}
                    onChange={(e) => updateTeamMember(index, 'description', e.target.value)}
                    placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –µ–≥–æ —Ä–æ–ª–∏"
                    rows={3}
                  />
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'history' && (
          <div className="history-section">
            <h3>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–ø–∞–Ω–∏–∏</h3>
            
            <div className="form-group">
              <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞:</label>
              <input
                type="text"
                name="title"
                value={formData.history.title}
                onChange={handleHistoryChange}
                placeholder="–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"
              />
            </div>
            
            <div className="form-group">
              <label>–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç:</label>
              <textarea
                name="content"
                value={formData.history.content}
                onChange={handleHistoryChange}
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏..."
                rows={6}
              />
            </div>
            
            <div className="milestones-section">
              <div className="section-header">
                <h4>–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã</h4>
                <button onClick={addMilestone} className="add-btn">
                  <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø
                </button>
              </div>
              
              {formData.history.milestones.map((milestone, index) => (
                <div key={index} className="milestone-item">
                  <div className="milestone-header">
                    <span>–≠—Ç–∞–ø #{index + 1}</span>
                    <button onClick={() => removeMilestone(index)} className="remove-btn">
                      <FaTrash />
                    </button>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-group">
                      <label>–ì–æ–¥:</label>
                      <input
                        type="text"
                        value={milestone.year}
                        onChange={(e) => updateMilestone(index, 'year', e.target.value)}
                        placeholder="2023"
                      />
                    </div>
                    <div className="form-group">
                      <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</label>
                      <input
                        type="text"
                        value={milestone.title}
                        onChange={(e) => updateMilestone(index, 'title', e.target.value)}
                        placeholder="–í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
                      />
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea
                      value={milestone.description}
                      onChange={(e) => updateMilestone(index, 'description', e.target.value)}
                      placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
                      rows={2}
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'contacts' && (
          <div className="contacts-section">
            <h3>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            
            <div className="form-row">
              <div className="form-group">
                <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                <input
                  type="text"
                  name="phone"
                  value={formData.contacts.phone}
                  onChange={handleContactChange}
                  placeholder="+7 (495) 123-45-67"
                />
              </div>
              <div className="form-group">
                <label>Email:</label>
                <input
                  type="email"
                  name="email"
                  value={formData.contacts.email}
                  onChange={handleContactChange}
                  placeholder="info@company.ru"
                />
              </div>
            </div>
            
            <div className="form-group">
              <label>–ê–¥—Ä–µ—Å:</label>
              <input
                type="text"
                name="address"
                value={formData.contacts.address}
                onChange={handleContactChange}
                placeholder="–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123"
              />
            </div>
            
            <div className="form-group">
              <label>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</label>
              <input
                type="text"
                name="workingHours"
                value={formData.contacts.workingHours}
                onChange={handleContactChange}
                placeholder="–ü–Ω-–ü—Ç: 9:00-18:00, –°–±: 10:00-16:00"
              />
            </div>
          </div>
        )}

        {activeTab === 'delivery' && (
          <div className="delivery-payment-admin">
            <h3>–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞</h3>

            <div className="subsection">
              <div className="section-header">
                <h4>–®–∞–≥–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</h4>
                <button
                  className="add-btn"
                  onClick={() => setFormData(prev => ({
                    ...prev,
                    deliveryAndPayment: {
                      ...prev.deliveryAndPayment,
                      steps: [...(prev.deliveryAndPayment.steps || []), { title: '', description: '' }]
                    }
                  }))}
                >
                  <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥
                </button>
              </div>

              {(formData.deliveryAndPayment.steps || []).map((step, index) => (
                <div key={index} className="list-item">
                  <div className="item-header">
                    <span>–®–∞–≥ #{index + 1}</span>
                    <button className="remove-btn" onClick={() => setFormData(prev => ({
                      ...prev,
                      deliveryAndPayment: {
                        ...prev.deliveryAndPayment,
                        steps: prev.deliveryAndPayment.steps.filter((_, i) => i !== index)
                      }
                    }))}>
                      <FaTrash />
                    </button>
                  </div>
                  <div className="form-row">
                    <div className="form-group">
                      <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞:</label>
                      <input
                        type="text"
                        value={step.title}
                        onChange={(e) => setFormData(prev => ({
                          ...prev,
                          deliveryAndPayment: {
                            ...prev.deliveryAndPayment,
                            steps: prev.deliveryAndPayment.steps.map((s, i) => i === index ? { ...s, title: e.target.value } : s)
                          }
                        }))}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É"
                      />
                    </div>
                  </div>
                  <div className="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞:</label>
                    <textarea
                      rows={3}
                      value={step.description}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        deliveryAndPayment: {
                          ...prev.deliveryAndPayment,
                          steps: prev.deliveryAndPayment.steps.map((s, i) => i === index ? { ...s, description: e.target.value } : s)
                        }
                      }))}
                      placeholder="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ"
                    />
                  </div>
                </div>
              ))}
            </div>

            <div className="subsection">
              <div className="section-header">
                <h4>–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏</h4>
                <button
                  className="add-btn"
                  onClick={() => setFormData(prev => ({
                    ...prev,
                    deliveryAndPayment: {
                      ...prev.deliveryAndPayment,
                      deliveryMethods: [...(prev.deliveryAndPayment.deliveryMethods || []), { title: '', items: [] }]
                    }
                  }))}
                >
                  <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–±
                </button>
              </div>

              {(formData.deliveryAndPayment.deliveryMethods || []).map((method, index) => (
                <div key={index} className="list-item">
                  <div className="item-header">
                    <span>–°–ø–æ—Å–æ–± #{index + 1}</span>
                    <button className="remove-btn" onClick={() => setFormData(prev => ({
                      ...prev,
                      deliveryAndPayment: {
                        ...prev.deliveryAndPayment,
                        deliveryMethods: prev.deliveryAndPayment.deliveryMethods.filter((_, i) => i !== index)
                      }
                    }))}>
                      <FaTrash />
                    </button>
                  </div>
                  <div className="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input
                      type="text"
                      value={method.title}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        deliveryAndPayment: {
                          ...prev.deliveryAndPayment,
                          deliveryMethods: prev.deliveryAndPayment.deliveryMethods.map((m, i) => i === index ? { ...m, title: e.target.value } : m)
                        }
                      }))}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∞–º–æ–≤—ã–≤–æ–∑"
                    />
                  </div>
                  <div className="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea
                      rows={3}
                      value={method.description || ''}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        deliveryAndPayment: {
                          ...prev.deliveryAndPayment,
                          deliveryMethods: prev.deliveryAndPayment.deliveryMethods.map((m, i) => i === index ? { ...m, description: e.target.value } : m)
                        }
                      }))}
                      placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º)"
                    />
                  </div>
                  <div className="links-section">
                    <div className="section-header">
                      <h5>–ü–æ–¥–ø—É–Ω–∫—Ç—ã</h5>
                      <button className="add-btn" onClick={() => setFormData(prev => ({
                        ...prev,
                        deliveryAndPayment: {
                          ...prev.deliveryAndPayment,
                          deliveryMethods: prev.deliveryAndPayment.deliveryMethods.map((m, i) => i === index ? { ...m, items: [...(m.items || []), ''] } : m)
                        }
                      }))}>
                        <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø—É–Ω–∫—Ç
                      </button>
                    </div>
                    {(method.items || []).map((it, idx) => (
                      <div key={idx} className="form-row">
                        <div className="form-group" style={{ flex: 1 }}>
                          <input
                            type="text"
                            value={it}
                            onChange={(e) => setFormData(prev => ({
                              ...prev,
                              deliveryAndPayment: {
                                ...prev.deliveryAndPayment,
                                deliveryMethods: prev.deliveryAndPayment.deliveryMethods.map((m, i) => i === index ? {
                                  ...m,
                                  items: m.items.map((val, ii) => ii === idx ? e.target.value : val)
                                } : m)
                              }
                            }))}
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π"
                          />
                        </div>
                        <button className="remove-btn" onClick={() => setFormData(prev => ({
                          ...prev,
                          deliveryAndPayment: {
                            ...prev.deliveryAndPayment,
                            deliveryMethods: prev.deliveryAndPayment.deliveryMethods.map((m, i) => i === index ? {
                              ...m,
                              items: m.items.filter((_, ii) => ii !== idx)
                            } : m)
                          }
                        }))}>
                          <FaTrash />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>

            <div className="subsection">
              <h4>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ</h4>
              <div className="form-group">
                <textarea
                  rows={3}
                  value={formData.deliveryAndPayment.deliveryNote}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    deliveryAndPayment: { ...prev.deliveryAndPayment, deliveryNote: e.target.value }
                  }))}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –æ–±—â–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–¥–±–æ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —Å—Ä–æ–∫–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏"
                />
              </div>
            </div>

            <div className="subsection">
              <h4>–û–ø–ª–∞—Ç–∞</h4>
              <div className="form-group">
                <label>–ü–æ—á–µ–º—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</label>
                <textarea
                  rows={3}
                  value={formData.deliveryAndPayment.payment.whyPrepay}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    deliveryAndPayment: { ...prev.deliveryAndPayment, payment: { ...prev.deliveryAndPayment.payment, whyPrepay: e.target.value } }
                  }))}
                />
              </div>
              <div className="form-group">
                <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ:</label>
                <textarea
                  rows={3}
                  value={formData.deliveryAndPayment.payment.whyPrepayExtra}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    deliveryAndPayment: { ...prev.deliveryAndPayment, payment: { ...prev.deliveryAndPayment.payment, whyPrepayExtra: e.target.value } }
                  }))}
                />
              </div>
              <div className="form-group">
                <label>–ì–∞—Ä–∞–Ω—Ç–∏–∏ —á–µ—Å—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏:</label>
                <textarea
                  rows={3}
                  value={formData.deliveryAndPayment.payment.trust}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    deliveryAndPayment: { ...prev.deliveryAndPayment, payment: { ...prev.deliveryAndPayment.payment, trust: e.target.value } }
                  }))}
                />
              </div>
              <div className="form-group">
                <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ –≥–∞—Ä–∞–Ω—Ç–∏—è—Ö:</label>
                <textarea
                  rows={3}
                  value={formData.deliveryAndPayment.payment.trustExtra}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    deliveryAndPayment: { ...prev.deliveryAndPayment, payment: { ...prev.deliveryAndPayment.payment, trustExtra: e.target.value } }
                  }))}
                />
              </div>
              <div className="form-group">
                <label>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</label>
                <textarea
                  rows={2}
                  value={formData.deliveryAndPayment.payment.requisites}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    deliveryAndPayment: { ...prev.deliveryAndPayment, payment: { ...prev.deliveryAndPayment.payment, requisites: e.target.value } }
                  }))}
                />
              </div>
            </div>
          </div>
        )}

        {activeTab === 'footer' && (
          <div className="footer-section">
            <h3>–ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (—Ñ—É—Ç–µ—Ä)</h3>
            
            <div className="footer-subsection">
              <h4>–†–∞–∑–¥–µ–ª "–û –∫–æ–º–ø–∞–Ω–∏–∏"</h4>
              <div className="form-group">
                <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                <input
                  type="text"
                  value={formData.footer.aboutSection.title}
                  onChange={(e) => handleFooterChange('aboutSection', 'title', e.target.value)}
                  placeholder="–û –∫–æ–º–ø–∞–Ω–∏–∏"
                />
              </div>
              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                <textarea
                  value={formData.footer.aboutSection.description}
                  onChange={(e) => handleFooterChange('aboutSection', 'description', e.target.value)}
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                  rows={3}
                />
              </div>
            </div>

            <div className="footer-subsection">
              <h4>–†–∞–∑–¥–µ–ª "–ö–æ–Ω—Ç–∞–∫—Ç—ã"</h4>
              <div className="form-group">
                <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                <input
                  type="text"
                  value={formData.footer.contactsSection.title}
                  onChange={(e) => handleFooterChange('contactsSection', 'title', e.target.value)}
                  placeholder="–ö–æ–Ω—Ç–∞–∫—Ç—ã"
                />
              </div>
              <div className="form-row">
                <div className="form-group">
                  <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                  <input
                    type="text"
                    value={formData.footer.contactsSection.phone}
                    onChange={(e) => handleFooterChange('contactsSection', 'phone', e.target.value)}
                    placeholder="+7 (800) 123-45-67"
                  />
                </div>
                <div className="form-group">
                  <label>Email:</label>
                  <input
                    type="email"
                    value={formData.footer.contactsSection.email}
                    onChange={(e) => handleFooterChange('contactsSection', 'email', e.target.value)}
                    placeholder="info@company.ru"
                  />
                </div>
              </div>
              <div className="form-group">
                <label>–ê–¥—Ä–µ—Å:</label>
                <input
                  type="text"
                  value={formData.footer.contactsSection.address}
                  onChange={(e) => handleFooterChange('contactsSection', 'address', e.target.value)}
                  placeholder="–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123"
                />
              </div>
            </div>

            <div className="footer-subsection">
              <h4>–†–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"</h4>
              <div className="form-group">
                <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                <input
                  type="text"
                  value={formData.footer.informationSection.title}
                  onChange={(e) => handleFooterChange('informationSection', 'title', e.target.value)}
                  placeholder="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                />
              </div>
              
              <div className="links-section">
                <div className="section-header">
                  <h5>–°—Å—ã–ª–∫–∏</h5>
                  <button onClick={addFooterLink} className="add-btn">
                    <FaPlus /> –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
                  </button>
                </div>
                
                {formData.footer.informationSection.links.map((link, index) => (
                  <div key={index} className="link-item">
                    <div className="link-header">
                      <span>–°—Å—ã–ª–∫–∞ #{index + 1}</span>
                      <button onClick={() => removeFooterLink(index)} className="remove-btn">
                        <FaTrash />
                      </button>
                    </div>
                    
                    <div className="form-row">
                      <div className="form-group">
                        <label>–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏:</label>
                        <input
                          type="text"
                          value={link.text}
                          onChange={(e) => handleFooterLinkChange(index, 'text', e.target.value)}
                          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏"
                        />
                      </div>
                      <div className="form-group">
                        <label>URL:</label>
                        <input
                          type="text"
                          value={link.url}
                          onChange={(e) => handleFooterLinkChange(index, 'url', e.target.value)}
                          placeholder="/about –∏–ª–∏ https://example.com"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="footer-subsection">
              <h4>–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞</h4>
              <div className="form-group">
                <label>–¢–µ–∫—Å—Ç –∫–æ–ø–∏—Ä–∞–π—Ç–∞:</label>
                <input
                  type="text"
                  value={formData.footer.copyright}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    footer: { ...prev.footer, copyright: e.target.value }
                  }))}
                  placeholder="¬© 2024 –í–µ–∑–¥–µ—Ö–æ–¥–ó–∞–ø—á–∞—Å—Ç–∏. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã."
                />
              </div>
            </div>
          </div>
        )}


      </div>

      <div className="form-actions">
        <button onClick={saveContent} className="save-btn">
          <FaSave /> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        </button>
      </div>
    </div>
  );
}