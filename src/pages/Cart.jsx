import React, { useState, useMemo } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { FaTrash, FaMinus, FaPlus, FaShoppingCart, FaArrowLeft, FaPercent, FaTags } from 'react-icons/fa';
import { useCart } from '../context/CartContext';
import { useAdminData } from '../context/AdminDataContext';
import { useOrders } from '../context/OrdersContext';
import { getMainImage } from '../utils/imageHelpers';
import { sendTelegramMessage, formatOrderMessage, generateOrderNumber } from '../utils/telegramService';
import './Cart.css';

function Cart() {
  const { 
    cartItems, 
    removeFromCart, 
    updateQuantity, 
    clearCart, 
    getCartTotal 
  } = useCart();
  
  const { promotions, products } = useAdminData();
  const { createOrder } = useOrders();
  const navigate = useNavigate();
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log('Cart component: useOrders hook result:', { createOrder });
  const [showCheckout, setShowCheckout] = useState(false);
  const [orderForm, setOrderForm] = useState({
    name: '',
    phone: '',
    email: '',
    address: '',
    deliveryMethod: 'pickup',
    paymentMethod: 'cash',
    comment: ''
  });

  // –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö —Å–∫–∏–¥–æ–∫
  const applicableDiscounts = useMemo(() => {
    const cartTotal = getCartTotal();
    const cartCategories = [...new Set(cartItems.map(item => {
      const product = products.find(p => p.id === item.id);
      return product?.category;
    }).filter(Boolean))];

    const activePromotions = promotions.filter(promo => {
      if (!promo.active) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      if (promo.validUntil) {
        const validDate = new Date(promo.validUntil);
        if (validDate < new Date()) return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏
      if (promo.minPurchase && cartTotal < promo.minPurchase) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
      if (promo.category && promo.category !== 'all' && !cartCategories.includes(promo.category)) {
        return false;
      }
      
      return true;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–∫–∏–¥–∫–∏ (–ª—É—á—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
    return activePromotions.sort((a, b) => (b.discount || 0) - (a.discount || 0));
  }, [cartItems, promotions, products, getCartTotal]);

  // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
  const priceCalculation = useMemo(() => {
    const subtotal = getCartTotal();
    const bestDiscount = applicableDiscounts[0];
    const discountAmount = bestDiscount ? Math.round(subtotal * (bestDiscount.discount / 100)) : 0;
    const total = subtotal - discountAmount;

    return {
      subtotal,
      discountAmount,
      total,
      appliedPromotion: bestDiscount
    };
  }, [getCartTotal, applicableDiscounts]);

  const handleQuantityChange = (productId, newQuantity) => {
    updateQuantity(productId, newQuantity);
  };

  const handleRemoveItem = (productId) => {
    removeFromCart(productId);
  };

  const handleFormChange = (e) => {
    setOrderForm({
      ...orderForm,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmitOrder = async (e) => {
    e.preventDefault();
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
      const orderNumber = generateOrderNumber();
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const orderData = {
        orderForm,
        cartItems,
        priceCalculation,
        orderNumber
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º—É
      const savedOrder = await createOrder(orderData);
      console.log('–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ:', savedOrder);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const message = formatOrderMessage(orderData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Telegram...');
      const result = await sendTelegramMessage(message);
      
      if (result.success) {
        alert(`–ó–∞–∫–∞–∑ #${orderNumber} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
        console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
      } else {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', result.error);
        alert(`–ó–∞–∫–∞–∑ #${orderNumber} –æ—Ñ–æ—Ä–º–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!`);
      }
      
      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      clearCart();
      setShowCheckout(false);
      navigate('/');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.');
    }
  };

  if (cartItems.length === 0) {
    return (
      <div className="cart-page">
        <div className="container">
          <div className="empty-cart">
            <FaShoppingCart className="empty-cart-icon" />
            <h2>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
            <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</p>
            <Link to="/catalog" className="continue-shopping-btn">
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="cart-page">
      <div className="container">
        <div className="cart-header">
          <button onClick={() => navigate(-1)} className="back-button">
            <FaArrowLeft /> –ù–∞–∑–∞–¥
          </button>
          <h1>–ö–æ—Ä–∑–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤</h1>
          <button onClick={clearCart} className="clear-cart-btn">
            –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
          </button>
        </div>

        <div className="cart-content">
          <div className="cart-items">
            <AnimatePresence>
              {cartItems.map((item) => (
                <motion.div
                  key={item.id}
                  className="cart-item"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, x: -100 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="item-image">
                    {(() => {
                      const productData = products.find(p => p.id === item.id);
                      if (!productData) return <span className="item-icon">üì¶</span>;
                      
                      const mainImage = getMainImage(productData);
                      if (mainImage?.data) {
                        if (
                          typeof mainImage.data === 'string' &&
                          (mainImage.data.startsWith('data:image') || mainImage.data.startsWith('/uploads/') || mainImage.data.startsWith('http'))
                        ) {
                          return <img src={mainImage.data} alt={item.title} className="item-image-img" />;
                        }
                        return <span className="item-icon">{mainImage.data}</span>;
                      }
                      return <span className="item-icon">üì¶</span>;
                    })()}
                  </div>
                  
                  <div className="item-info">
                    <h3>{item.title}</h3>
                    <p className="item-brand">{item.brand}</p>
                    <p className="item-price">{item.price.toLocaleString()} ‚ÇΩ</p>
                  </div>
                  
                  <div className="item-controls">
                    <div className="quantity-controls">
                      <button
                        onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                        disabled={item.quantity <= 1}
                        className="quantity-btn"
                      >
                        <FaMinus />
                      </button>
                      <input 
                        type="text" 
                        value={item.quantity} 
                        onChange={(e) => {
                          const inputValue = e.target.value.replace(/[^0-9]/g, '');
                          // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
                          if (inputValue === '') {
                            // –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            return;
                          }
                          const value = parseInt(inputValue);
                          if (!isNaN(value) && value >= 1) {
                            handleQuantityChange(item.id, value);
                          }
                        }}
                        onBlur={(e) => {
                          // –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —Å—Ç–∞–≤–∏–º 1
                          const cleanValue = e.target.value.replace(/[^0-9]/g, '');
                          if (cleanValue === '' || parseInt(cleanValue) < 1) {
                            handleQuantityChange(item.id, 1);
                          }
                        }}
                        onFocus={(e) => e.target.select()}
                        placeholder="1"
                        className="quantity-input"
                      />
                      <button
                        onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                        className="quantity-btn"
                      >
                        <FaPlus />
                      </button>
                    </div>
                    
                    <div className="item-total">
                      {(item.price * item.quantity).toLocaleString()} ‚ÇΩ
                    </div>
                    
                    <button
                      onClick={() => handleRemoveItem(item.id)}
                      className="remove-btn"
                    >
                      <FaTrash />
                    </button>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>
          </div>

          <div className="cart-summary">
            <div className="summary-card">
              <h3>–ò—Ç–æ–≥–æ</h3>
              <div className="summary-line">
                <span>–¢–æ–≤–∞—Ä—ã ({cartItems.reduce((sum, item) => sum + item.quantity, 0)} —à—Ç):</span>
                <span>{priceCalculation.subtotal.toLocaleString()} ‚ÇΩ</span>
              </div>
              
              {priceCalculation.appliedPromotion && (
                <div className="summary-line discount-line">
                  <span>
                    <FaPercent className="discount-icon" />
                    –°–∫–∏–¥–∫–∞ "{priceCalculation.appliedPromotion.title}" ({priceCalculation.appliedPromotion.discount}%):
                  </span>
                  <span className="discount-amount">
                    -{priceCalculation.discountAmount.toLocaleString()} ‚ÇΩ
                  </span>
                </div>
              )}
              
              <div className="summary-line">
                <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
              </div>
              
              <div className="summary-total">
                <span>–ö –æ–ø–ª–∞—Ç–µ:</span>
                <span>{priceCalculation.total.toLocaleString()} ‚ÇΩ</span>
              </div>
              
              {applicableDiscounts.length > 0 && (
                <div className="promotions-info">
                  <FaTags className="promo-icon" />
                  <span>–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏!</span>
                </div>
              )}
              
              <motion.button
                className="checkout-btn"
                onClick={() => setShowCheckout(true)}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
              </motion.button>
            </div>
          </div>
        </div>

        <AnimatePresence>
          {showCheckout && (
            <motion.div
              className="checkout-modal"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <motion.div
                className="checkout-content"
                initial={{ y: 50, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                exit={{ y: 50, opacity: 0 }}
              >
                <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
                
                <form onSubmit={handleSubmitOrder} className="order-form">
                  <div className="form-group">
                    <label htmlFor="name">–ò–º—è *</label>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      value={orderForm.name}
                      onChange={handleFormChange}
                      required
                    />
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                    <input
                      type="tel"
                      id="phone"
                      name="phone"
                      value={orderForm.phone}
                      onChange={handleFormChange}
                      required
                    />
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="email">Email</label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      value={orderForm.email}
                      onChange={handleFormChange}
                    />
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="deliveryMethod">–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è *</label>
                    <select
                      id="deliveryMethod"
                      name="deliveryMethod"
                      value={orderForm.deliveryMethod}
                      onChange={handleFormChange}
                      required
                    >
                      <option value="pickup">–°–∞–º–æ–≤—ã–≤–æ–∑</option>
                      <option value="delivery">–î–æ—Å—Ç–∞–≤–∫–∞</option>
                    </select>
                  </div>
                  
                  {orderForm.deliveryMethod === 'delivery' && (
                    <div className="form-group">
                      <label htmlFor="address">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ *</label>
                      <textarea
                        id="address"
                        name="address"
                        value={orderForm.address}
                        onChange={handleFormChange}
                        required={orderForm.deliveryMethod === 'delivery'}
                        rows="3"
                      />
                    </div>
                  )}
                  
                  <div className="form-group">
                    <label htmlFor="paymentMethod">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã *</label>
                    <select
                      id="paymentMethod"
                      name="paymentMethod"
                      value={orderForm.paymentMethod}
                      onChange={handleFormChange}
                      required
                    >
                      <option value="cash">–ù–∞–ª–∏—á–Ω—ã–º–∏</option>
                      <option value="card">–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</option>
                      <option value="transfer">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</option>
                    </select>
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</label>
                    <textarea
                      id="comment"
                      name="comment"
                      value={orderForm.comment}
                      onChange={handleFormChange}
                      rows="3"
                    />
                  </div>
                  
                  <div className="order-summary">
                    <h4>–í–∞—à –∑–∞–∫–∞–∑:</h4>
                    <div className="order-items">
                      {cartItems.map((item) => (
                        <div key={item.id} className="order-item">
                          <span>{item.title} √ó {item.quantity}</span>
                          <span>{(item.price * item.quantity).toLocaleString()} ‚ÇΩ</span>
                        </div>
                      ))}
                    </div>
                    {priceCalculation.appliedPromotion && (
                      <div className="discount-info">
                        <div className="discount-line">
                          <span>–ü–æ–¥—ã—Ç–æ–≥: {priceCalculation.subtotal.toLocaleString()} ‚ÇΩ</span>
                        </div>
                        <div className="discount-line">
                          <span className="discount-text">
                            <FaPercent /> –°–∫–∏–¥–∫–∞ "{priceCalculation.appliedPromotion.title}" ({priceCalculation.appliedPromotion.discount}%):
                          </span>
                          <span className="discount-amount">
                            -{priceCalculation.discountAmount.toLocaleString()} ‚ÇΩ
                          </span>
                        </div>
                      </div>
                    )}
                    <div className="order-total">
                      <strong>–ò—Ç–æ–≥–æ: {priceCalculation.total.toLocaleString()} ‚ÇΩ</strong>
                    </div>
                  </div>
                  
                  <div className="form-actions">
                    <button type="button" onClick={() => setShowCheckout(false)} className="cancel-btn">
                      –û—Ç–º–µ–Ω–∞
                    </button>
                    <button type="submit" className="submit-btn">
                      –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
                    </button>
                  </div>
                </form>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}

export default Cart;
