#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID –∏–∑ Telegram
 * –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
 */

const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ Chat ID –¥–ª—è Telegram –±–æ—Ç–∞');
console.log('=====================================');
console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Chat ID —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
console.log('   –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
console.log();

rl.question('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: ', (token) => {
  if (!token || token.trim() === '') {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    rl.close();
    return;
  }

  console.log();
  console.log('üì± –¢–µ–ø–µ—Ä—å:');
  console.log('1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª');
  console.log('2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç');
  console.log('3. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID');
  console.log();

  rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...', async () => {
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
      
      const response = await fetch(`https://api.telegram.org/bot${token}/getUpdates`);
      const data = await response.json();
      
      if (!data.ok) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:');
        console.log(`   ${data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        rl.close();
        return;
      }

      if (!data.result || data.result.length === 0) {
        console.log('‚ö†Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        console.log('   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
        console.log('   ‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç');
        console.log('   ‚Ä¢ –í —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        console.log('   ‚Ä¢ –ü—Ä–æ—à–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥');
        rl.close();
        return;
      }

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —á–∞—Ç—ã:');
      console.log();

      const chats = new Map();
      
      data.result.forEach((update, index) => {
        const chat = update.message?.chat || update.channel_post?.chat;
        if (chat) {
          const chatId = chat.id;
          const chatType = chat.type || 'private';
          const chatTitle = chat.title || chat.first_name || chat.username || `Chat ${chatId}`;
          
          if (!chats.has(chatId)) {
            chats.set(chatId, {
              id: chatId,
              type: chatType,
              title: chatTitle,
              username: chat.username
            });
          }
        }
      });

      chats.forEach((chat, index) => {
        const typeEmoji = {
          'private': 'üë§',
          'group': 'üë•',
          'supergroup': 'üë•',
          'channel': 'üì¢'
        };
        
        console.log(`${index + 1}. ${typeEmoji[chat.type] || '‚ùì'} ${chat.title}`);
        console.log(`   ID: ${chat.id}`);
        if (chat.username) {
          console.log(`   Username: @${chat.username}`);
        }
        console.log(`   –¢–∏–ø: ${chat.type}`);
        console.log();
      });

      console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chat ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫–µ');
      console.log('   –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID');
      console.log('   –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @username');
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:');
      console.log(`   ${error.message}`);
    }
    
    rl.close();
  });
});
