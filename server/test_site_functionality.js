// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ —Å PostgreSQL
const http = require('http');

console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ —Å PostgreSQL\n');

async function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const req = http.get(`http://localhost:3001/api${path}`, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (error) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });
    req.on('error', reject);
    req.setTimeout(10000, () => reject(new Error('Timeout')));
  });
}

async function testSiteFunctionality() {
  console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints:');
  console.log('‚îÄ'.repeat(50));
  
  const tests = [
    { path: '/products', name: '–¢–æ–≤–∞—Ä—ã' },
    { path: '/categories', name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' },
    { path: '/vehicles', name: '–í–µ–∑–¥–µ—Ö–æ–¥—ã' },
    { path: '/brands', name: '–ë—Ä–µ–Ω–¥—ã' },
    { path: '/promotions', name: '–ê–∫—Ü–∏–∏' },
    { path: '/orders', name: '–ó–∞–∫–∞–∑—ã' }
  ];
  
  for (const test of tests) {
    try {
      const response = await makeRequest(test.path);
      if (response.status === 200) {
        const count = Array.isArray(response.data) ? response.data.length : 'N/A';
        console.log(`‚úÖ ${test.name}: ${count} –∑–∞–ø–∏—Å–µ–π`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        if (Array.isArray(response.data) && response.data.length > 0) {
          const first = response.data[0];
          if (first.title) {
            console.log(`   üìÑ –ü—Ä–∏–º–µ—Ä: "${first.title}"`);
          } else if (first.name) {
            console.log(`   üìÑ –ü—Ä–∏–º–µ—Ä: "${first.name}"`);
          }
        }
      } else {
        console.log(`‚ùå ${test.name}: HTTP ${response.status}`);
      }
    } catch (error) {
      console.log(`‚ùå ${test.name}: ${error.message}`);
    }
  }
  
  console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
  console.log('‚îÄ'.repeat(50));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    const products = await makeRequest('/products');
    if (products.status === 200 && Array.isArray(products.data)) {
      console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.data.length}`);
      
      // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
      const withPrices = products.data.filter(p => p.price > 0);
      console.log(`üí∞ –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: ${withPrices.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —Ç–æ–≤–∞—Ä
      if (withPrices.length > 0) {
        const expensive = withPrices.reduce((max, p) => p.price > max.price ? p : max);
        console.log(`üíé –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π: "${expensive.title}" - ${expensive.price} —Ä—É–±.`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∑–¥–µ—Ö–æ–¥—ã
    const vehicles = await makeRequest('/vehicles');
    if (vehicles.status === 200 && Array.isArray(vehicles.data)) {
      console.log(`üöó –í—Å–µ–≥–æ –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤: ${vehicles.data.length}`);
      
      if (vehicles.data.length > 0) {
        vehicles.data.forEach(v => {
          console.log(`   üöô ${v.name} (${v.type}, ${v.terrain}) - ${v.price} —Ä—É–±.`);
        });
      }
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
  }
  
  console.log('\n3. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞:');
  console.log('‚îÄ'.repeat(50));
  console.log('üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å–∞–º:');
  console.log('   ‚Ä¢ http://localhost:5174 - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
  console.log('   ‚Ä¢ http://localhost:5174/catalog - –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤');
  console.log('   ‚Ä¢ http://localhost:5174/vehicles - –≤–µ–∑–¥–µ—Ö–æ–¥—ã');
  console.log('   ‚Ä¢ http://localhost:5174/admin - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
  console.log('');
  console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∏–∑ PostgreSQL!');
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
  console.log('‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL!');
}

testSiteFunctionality().catch(console.error);
