// –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
require('./load_env');
const { all, dbType } = require('./db_switch');

console.log('üóÑÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL\n');

async function viewDatabase() {
  console.log(`–¢–∏–ø –ë–î: ${dbType}\n`);
  
  if (dbType !== 'postgres') {
    console.log('‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ PostgreSQL!');
    return;
  }
  
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
  console.log('üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:');
  console.log('‚îÄ'.repeat(50));
  
  try {
    const tables = await all(`
      SELECT table_name, 
             (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name) as columns_count
      FROM information_schema.tables t
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    tables.forEach(table => {
      console.log(`üìä ${table.table_name} (${table.columns_count} –∫–æ–ª–æ–Ω–æ–∫)`);
    });
    
    console.log(`\n–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}\n`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: ${error.message}`);
    return;
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
  console.log('‚îÄ'.repeat(50));
  
  const mainTables = [
    'products', 'vehicles', 'categories', 'subcategories', 
    'brands', 'orders', 'customers', 'promotions'
  ];
  
  for (const table of mainTables) {
    try {
      const result = await all(`SELECT COUNT(*) as count FROM ${table}`);
      const count = result[0]?.count || 0;
      console.log(`üì¶ ${table.padEnd(15)}: ${count} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      console.log(`‚ùå ${table.padEnd(15)}: –æ—à–∏–±–∫–∞`);
    }
  }
  
  console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
  console.log('‚îÄ'.repeat(50));
  
  // –¢–æ–≤–∞—Ä—ã
  try {
    const products = await all('SELECT id, title, price FROM products LIMIT 5');
    console.log('\nüì¶ –¢–æ–≤–∞—Ä—ã (–ø–µ—Ä–≤—ã–µ 5):');
    products.forEach(p => {
      console.log(`   ${p.id}. ${p.title} - ${p.price} —Ä—É–±.`);
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤');
  }
  
  // –í–µ–∑–¥–µ—Ö–æ–¥—ã
  try {
    const vehicles = await all('SELECT id, name, type, terrain, price FROM vehicles LIMIT 5');
    console.log('\nüöó –í–µ–∑–¥–µ—Ö–æ–¥—ã:');
    vehicles.forEach(v => {
      console.log(`   ${v.id}. ${v.name} (${v.type}, ${v.terrain}) - ${v.price} —Ä—É–±.`);
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤');
  }
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  try {
    const categories = await all('SELECT id, name FROM categories ORDER BY id');
    console.log('\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    categories.forEach(c => {
      console.log(`   ${c.id}. ${c.name}`);
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
  }
  
  // –ó–∞–∫–∞–∑—ã
  try {
    const orders = await all('SELECT id, order_number, status, created_at FROM orders ORDER BY created_at DESC LIMIT 3');
    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:');
    orders.forEach(o => {
      const date = new Date(o.created_at).toLocaleDateString('ru-RU');
      console.log(`   ${o.order_number} - ${o.status} (${date})`);
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
  }
  
  console.log('\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è psql:');
  console.log('‚îÄ'.repeat(50));
  console.log('psql -U postgres -d ytorsweb  # –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î');
  console.log('\\dt                          # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü');
  console.log('\\d products                  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã products');
  console.log('SELECT * FROM products;      # –í—Å–µ —Ç–æ–≤–∞—Ä—ã');
  console.log('SELECT COUNT(*) FROM products; # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤');
  console.log('\\q                           # –í—ã–π—Ç–∏');
  
  console.log('\nüåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:');
  console.log('‚îÄ'.repeat(50));
  console.log('‚Ä¢ pgAdmin 4 - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PostgreSQL');
  console.log('‚Ä¢ Adminer - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ë–î');
  console.log('‚Ä¢ DBeaver - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ë–î');
}

viewDatabase().catch(console.error);
