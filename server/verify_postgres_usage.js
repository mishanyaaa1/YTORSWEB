// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL
require('./load_env');
const { all, dbType } = require('./db_switch');
const http = require('http');

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PostgreSQL...\n');

async function checkDatabase() {
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  console.log(`   –¢–∏–ø –ë–î: ${dbType}`);
  
  if (dbType === 'postgres') {
    console.log('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL');
  } else {
    console.log('   ‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite, –∞ –Ω–µ PostgreSQL');
    return;
  }
  
  console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL:');
  
  try {
    const products = await all('SELECT COUNT(*) as count FROM products');
    const vehicles = await all('SELECT COUNT(*) as count FROM vehicles');
    const orders = await all('SELECT COUNT(*) as count FROM orders');
    
    console.log(`   üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${products[0].count}`);
    console.log(`   üöó –í–µ–∑–¥–µ—Ö–æ–¥–æ–≤: ${vehicles[0].count}`);
    console.log(`   üìã –ó–∞–∫–∞–∑–æ–≤: ${orders[0].count}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
    const sampleProduct = await all('SELECT id, title, price FROM products LIMIT 1');
    if (sampleProduct.length > 0) {
      console.log(`   üìÑ –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: "${sampleProduct[0].title}" (${sampleProduct[0].price} —Ä—É–±.)`);
    }
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    return;
  }
  
  console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞:');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint
    const response = await new Promise((resolve, reject) => {
      const req = http.get('http://localhost:3001/api/products', (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => resolve({ status: res.statusCode, data }));
      });
      req.on('error', reject);
      req.setTimeout(5000, () => reject(new Error('Timeout')));
    });
    
    if (response.status === 200) {
      const products = JSON.parse(response.data);
      console.log(`   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∏–∑ PostgreSQL
      if (products.length > 0) {
        console.log(`   üìÑ –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ API: "${products[0].title}"`);
      }
    } else {
      console.log(`   ‚ùå API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    }
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
  }
  
  console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PostgreSQL:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ PostgreSQL
    const version = await all('SELECT version()');
    console.log(`   üêò PostgreSQL –≤–µ—Ä—Å–∏—è: ${version[0].version.split(',')[0]}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const dbName = await all('SELECT current_database()');
    console.log(`   üóÑÔ∏è –¢–µ–∫—É—â–∞—è –ë–î: ${dbName[0].current_database}`);
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}`);
  }
  
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5174 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞');
  console.log('üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–∑ PostgreSQL');
}

checkDatabase().catch(console.error);
