// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É SQLite –∏ PostgreSQL
require('./load_env');
const { all: pgAll, dbType } = require('./db_switch');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

console.log('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö SQLite vs PostgreSQL\n');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
const sqliteDb = new sqlite3.Database(path.join(__dirname, 'db.sqlite3'));

function sqliteAll(sql, params = []) {
  return new Promise((resolve, reject) => {
    sqliteDb.all(sql, params, (err, rows) => {
      if (err) return reject(err);
      resolve(rows);
    });
  });
}

async function compareDatabases() {
  console.log(`–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ë–î: ${dbType}\n`);
  
  const tables = ['products', 'vehicles', 'categories', 'orders'];
  
  for (const table of tables) {
    console.log(`üìä –¢–∞–±–ª–∏—Ü–∞: ${table}`);
    console.log('‚îÄ'.repeat(50));
    
    try {
      // –î–∞–Ω–Ω—ã–µ –∏–∑ SQLite
      const sqliteData = await sqliteAll(`SELECT COUNT(*) as count FROM ${table}`);
      const sqliteCount = sqliteData[0]?.count || 0;
      
      // –î–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL
      const pgData = await pgAll(`SELECT COUNT(*) as count FROM ${table}`);
      const pgCount = pgData[0]?.count || 0;
      
      console.log(`SQLite:      ${sqliteCount} –∑–∞–ø–∏—Å–µ–π`);
      console.log(`PostgreSQL:  ${pgCount} –∑–∞–ø–∏—Å–µ–π`);
      
      if (sqliteCount === pgCount) {
        console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      } else {
        console.log('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏–∑ –æ–±–µ–∏—Ö –ë–î
      if (sqliteCount > 0 && pgCount > 0) {
        try {
          const sqliteSample = await sqliteAll(`SELECT * FROM ${table} LIMIT 1`);
          const pgSample = await pgAll(`SELECT * FROM ${table} LIMIT 1`);
          
          console.log(`\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏–∑ SQLite:`);
          console.log(JSON.stringify(sqliteSample[0], null, 2));
          console.log(`\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏–∑ PostgreSQL:`);
          console.log(JSON.stringify(pgSample[0], null, 2));
        } catch (error) {
          console.log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: ${error.message}`);
        }
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    console.log('\n');
  }
  
  console.log('üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5174');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
  console.log('4. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–∑ PostgreSQL!');
  
  sqliteDb.close();
}

compareDatabases().catch(console.error);
