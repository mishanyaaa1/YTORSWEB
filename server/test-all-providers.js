const nodemailer = require('nodemailer');

// –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const TEST_CONFIGS = {
  gmail: {
    name: 'Gmail',
    host: 'smtp.gmail.com',
    port: 587,
    secure: false,
    auth: {
      user: 'test@gmail.com', // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® EMAIL
      pass: 'your-app-password' // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –ü–ê–†–û–õ–¨
    }
  },
  yandex: {
    name: 'Yandex',
    host: 'smtp.yandex.ru',
    port: 465,
    secure: true,
    auth: {
      user: 'test@yandex.ru', // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® EMAIL
      pass: 'your-app-password' // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –ü–ê–†–û–õ–¨
    }
  },
  mailru: {
    name: 'Mail.ru',
    host: 'smtp.mail.ru',
    port: 465,
    secure: true,
    auth: {
      user: 'test@mail.ru', // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® EMAIL
      pass: 'your-app-password' // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –ü–ê–†–û–õ–¨
    }
  },
  outlook: {
    name: 'Outlook',
    host: 'smtp-mail.outlook.com',
    port: 587,
    secure: false,
    auth: {
      user: 'test@outlook.com', // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® EMAIL
      pass: 'your-app-password' // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –ü–ê–†–û–õ–¨
    }
  },
  yahoo: {
    name: 'Yahoo',
    host: 'smtp.mail.yahoo.com',
    port: 587,
    secure: false,
    auth: {
      user: 'test@yahoo.com', // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® EMAIL
      pass: 'your-app-password' // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –ü–ê–†–û–õ–¨
    }
  }
};

async function testProvider(providerName, config) {
  console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é ${providerName}...`);
  console.log(`üìß Host: ${config.host}:${config.port}`);
  console.log(`üîí Secure: ${config.secure}`);
  console.log(`üë§ User: ${config.auth.user}`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
    const transporter = nodemailer.createTransporter(config);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
    await transporter.verify();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ...');
    const info = await transporter.sendMail({
      from: config.auth.user,
      to: 'i.am31827@gmail.com',
      subject: `–¢–µ—Å—Ç ${providerName} - ${new Date().toLocaleString()}`,
      text: `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç ${providerName}.\n\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç ${providerName} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`,
      html: `<h2>–¢–µ—Å—Ç ${providerName}</h2><p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç <strong>${providerName}</strong>.</p><p><strong>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</strong> ${new Date().toLocaleString('ru-RU')}</p><p>–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç <strong>${providerName}</strong> —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</p>`
    });
    
    console.log(`‚úÖ ${providerName} - –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`);
    console.log(`üì® Message ID: ${info.messageId}`);
    return { success: true, provider: providerName, messageId: info.messageId };
    
  } catch (error) {
    console.error(`‚ùå ${providerName} - –æ—à–∏–±–∫–∞:`, error.message);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    if (error.code === 'EAUTH') {
      console.error(`   üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`);
    } else if (error.code === 'ECONNECTION') {
      console.error(`   üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞.`);
    } else if (error.code === 'ETIMEDOUT') {
      console.error(`   ‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP.`);
    } else if (error.code === 'ENOTFOUND') {
      console.error(`   üîç –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å host.`);
    }
    
    return { success: false, provider: providerName, error: error.message };
  }
}

async function testAllProviders() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö SMTP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
  console.log('=' .repeat(50));
  
  const results = [];
  
  for (const [key, config] of Object.entries(TEST_CONFIGS)) {
    const result = await testProvider(config.name, config);
    results.push(result);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    if (key !== Object.keys(TEST_CONFIGS).pop()) {
      console.log('‚è≥ –ñ–¥—É 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '=' .repeat(50));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
  console.log('=' .repeat(50));
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful.length}`);
  successful.forEach(r => {
    console.log(`   ‚Ä¢ ${r.provider} - ${r.messageId}`);
  });
  
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${failed.length}`);
  failed.forEach(r => {
    console.log(`   ‚Ä¢ ${r.provider} - ${r.error}`);
  });
  
  if (successful.length > 0) {
    console.log('\nüéâ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤!');
    console.log('üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ server/smtp-config.js');
  } else {
    console.log('\n‚ö†Ô∏è  –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   ‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞');
    console.log('   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏ –ø–∞—Ä–æ–ª–µ–π');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testAllProviders().catch(console.error);
