// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
require('./load_env');
const { all, get } = require('./db_switch');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üóÑÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n');

async function showMainMenu() {
  console.log('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:');
  console.log('1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã');
  console.log('2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã');
  console.log('3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–∑–¥–µ—Ö–æ–¥—ã');
  console.log('4. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã');
  console.log('5. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
  console.log('6. –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å');
  console.log('7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  console.log('0. –í—ã—Ö–æ–¥\n');
  
  rl.question('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-7): ', handleMainMenu);
}

async function handleMainMenu(choice) {
  console.log('\n' + '‚îÄ'.repeat(50) + '\n');
  
  switch (choice) {
    case '1':
      await showTables();
      break;
    case '2':
      await showProducts();
      break;
    case '3':
      await showVehicles();
      break;
    case '4':
      await showOrders();
      break;
    case '5':
      await showCategories();
      break;
    case '6':
      await runCustomQuery();
      break;
    case '7':
      await showStatistics();
      break;
    case '0':
      console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
      rl.close();
      return;
    default:
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
  }
  
  console.log('\n' + '‚îÄ'.repeat(50) + '\n');
  rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => {
    showMainMenu();
  });
}

async function showTables() {
  console.log('üìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
  try {
    const tables = await all(`
      SELECT table_name, 
             (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name) as columns_count
      FROM information_schema.tables t
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    tables.forEach((table, index) => {
      console.log(`${index + 1}. ${table.table_name} (${table.columns_count} –∫–æ–ª–æ–Ω–æ–∫)`);
    });
    
    console.log(`\n–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function showProducts() {
  console.log('üì¶ –¢–æ–≤–∞—Ä—ã:');
  try {
    const products = await all('SELECT id, title, price, available FROM products ORDER BY id LIMIT 10');
    
    console.log('ID | –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –î–æ—Å—Ç—É–ø–µ–Ω');
    console.log('‚îÄ'.repeat(60));
    
    products.forEach(p => {
      const available = p.available ? '‚úÖ' : '‚ùå';
      console.log(`${p.id.toString().padEnd(3)} | ${p.title.padEnd(25)} | ${p.price.toString().padEnd(8)} | ${available}`);
    });
    
    const total = await get('SELECT COUNT(*) as count FROM products');
    console.log(`\n–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${total.count}`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function showVehicles() {
  console.log('üöó –í–µ–∑–¥–µ—Ö–æ–¥—ã:');
  try {
    const vehicles = await all('SELECT id, name, type, terrain, price, available FROM vehicles ORDER BY id');
    
    console.log('ID | –ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø | –ú–µ—Å—Ç–Ω–æ—Å—Ç—å | –¶–µ–Ω–∞ | –î–æ—Å—Ç—É–ø–µ–Ω');
    console.log('‚îÄ'.repeat(80));
    
    vehicles.forEach(v => {
      const available = v.available ? '‚úÖ' : '‚ùå';
      console.log(`${v.id.toString().padEnd(3)} | ${v.name.padEnd(12)} | ${v.type.padEnd(8)} | ${v.terrain.padEnd(10)} | ${v.price.toString().padEnd(8)} | ${available}`);
    });
    
    console.log(`\n–í—Å–µ–≥–æ –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤: ${vehicles.length}`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function showOrders() {
  console.log('üìã –ó–∞–∫–∞–∑—ã:');
  try {
    const orders = await all(`
      SELECT o.id, o.order_number, o.status, o.created_at, c.name as customer_name
      FROM orders o
      LEFT JOIN customers c ON o.customer_id = c.id
      ORDER BY o.created_at DESC
    `);
    
    console.log('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ | –°—Ç–∞—Ç—É—Å | –ö–ª–∏–µ–Ω—Ç | –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
    console.log('‚îÄ'.repeat(70));
    
    orders.forEach(o => {
      const date = new Date(o.created_at).toLocaleDateString('ru-RU');
      console.log(`${o.order_number.padEnd(12)} | ${o.status.padEnd(6)} | ${(o.customer_name || 'N/A').padEnd(15)} | ${date}`);
    });
    
    console.log(`\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function showCategories() {
  console.log('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
  try {
    const categories = await all(`
      SELECT c.id, c.name as category_name,
             COUNT(s.id) as subcategories_count
      FROM categories c
      LEFT JOIN subcategories s ON c.id = s.category_id
      GROUP BY c.id, c.name
      ORDER BY c.id
    `);
    
    categories.forEach(c => {
      console.log(`${c.id}. ${c.category_name} (${c.subcategories_count} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)`);
    });
    
    const subcategories = await all('SELECT COUNT(*) as count FROM subcategories');
    console.log(`\n–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
    console.log(`–í—Å–µ–≥–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${subcategories[0].count}`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function runCustomQuery() {
  console.log('üíª –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞:');
  console.log('–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:');
  console.log('‚Ä¢ SELECT * FROM products WHERE price > 1000 LIMIT 5;');
  console.log('‚Ä¢ SELECT COUNT(*) FROM products;');
  console.log('‚Ä¢ SELECT name, type FROM vehicles;');
  console.log('‚Ä¢ \\q –¥–ª—è –≤—ã—Ö–æ–¥–∞\n');
  
  rl.question('–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å: ', async (query) => {
    if (query.toLowerCase() === '\\q') {
      showMainMenu();
      return;
    }
    
    try {
      console.log('\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç:');
      console.log('‚îÄ'.repeat(50));
      
      const result = await all(query);
      
      if (result.length === 0) {
        console.log('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.');
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const displayResult = result.slice(0, 10);
        
        displayResult.forEach((row, index) => {
          console.log(`${index + 1}.`, JSON.stringify(row, null, 2));
        });
        
        if (result.length > 10) {
          console.log(`\n... –∏ –µ—â–µ ${result.length - 10} –∑–∞–ø–∏—Å–µ–π`);
        }
        
        console.log(`\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${result.length}`);
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    console.log('\n' + '‚îÄ'.repeat(50) + '\n');
    rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => {
      showMainMenu();
    });
  });
}

async function showStatistics() {
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  try {
    const stats = await all(`
      SELECT 
        'products' as table_name, COUNT(*) as count FROM products
      UNION ALL
      SELECT 'vehicles', COUNT(*) FROM vehicles
      UNION ALL
      SELECT 'categories', COUNT(*) FROM categories
      UNION ALL
      SELECT 'subcategories', COUNT(*) FROM subcategories
      UNION ALL
      SELECT 'brands', COUNT(*) FROM brands
      UNION ALL
      SELECT 'orders', COUNT(*) FROM orders
      UNION ALL
      SELECT 'customers', COUNT(*) FROM customers
      UNION ALL
      SELECT 'promotions', COUNT(*) FROM promotions
      ORDER BY table_name
    `);
    
    console.log('–¢–∞–±–ª–∏—Ü–∞ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π');
    console.log('‚îÄ'.repeat(30));
    
    stats.forEach(stat => {
      console.log(`${stat.table_name.padEnd(12)} | ${stat.count}`);
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalProducts = await get('SELECT COUNT(*) as count FROM products');
    const availableProducts = await get('SELECT COUNT(*) as count FROM products WHERE available = true');
    const totalValue = await get('SELECT SUM(price) as total FROM products WHERE available = true');
    
    console.log('\nüì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:');
    console.log(`–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts.count}`);
    console.log(`–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${availableProducts.count}`);
    console.log(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalValue.total?.toLocaleString('ru-RU')} —Ä—É–±.`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é
showMainMenu();
